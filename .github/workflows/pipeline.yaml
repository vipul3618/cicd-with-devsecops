name: CI-CD-Pipeline

permissions:
  contents: write

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
      - Readme.md
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Mondays

jobs:
  sonar-scan:
    name: SonarQube Scan
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Check Quality Gate Status
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Notify Slack (SonarQube Completed)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "✅ *SonarQube scan completed successfully!*"

  trivy-fs-scan:
    name: Trivy File System Scan
    runs-on: ubuntu-latest
    needs: sonar-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Run Trivy FS Scan
        run: |
          trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table . > trivy-fs-results.txt

      - name: Upload Trivy FS Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: Trivy-FS-Scan-Report
          path: trivy-fs-results.txt

      - name: Notify Slack (Trivy FS Completed)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "✅ *Trivy file system scan completed successfully!*"

  owasp-dependency-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    needs: trivy-fs-scan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache OWASP Dependency-Check NVD Data
        id: cache-nvd
        uses: actions/cache@v4
        with:
          path: ~/.dependency-check-data
          key: dependency-check-nvd-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            dependency-check-nvd-${{ runner.os }}-
            
      - name: Download and Run OWASP Dependency-Check v12.1.0
        run: |
          echo "Downloading OWASP Dependency-Check v12.1.0..."
          curl -sLO https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip -o dependency-check-12.1.0-release.zip
          ls -R dependency-check  # Confirm extraction
          
          DATA_DIR="$HOME/.dependency-check-data"
          mkdir -p "$DATA_DIR"
          mkdir -p reports
          ./dependency-check/bin/dependency-check.sh \
            --project "My Project Name" \
            --scan . \
            --format "HTML" \
            --out "reports" \
            --data "$DATA_DIR" \
            --nvdApiKey "${{ secrets.NVD_API_KEY }}" \
            --exclude .github --exclude tests --exclude docs
          
      - name: Upload OWASP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Dependency-Check-Report
          path: reports/

      - name: Notify Slack (OWASP Completed)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "✅ *OWASP Dependency-Check completed successfully!*"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: owasp-dependency-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup docker build
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myfile:${{ github.run_id }}
          platforms: linux/amd64,linux/arm64

  trivy-image-scan:
    name: Trivy Image Scan & SBOM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Syft
        run: |
          curl -sSL https://github.com/anchore/syft/releases/download/v0.56.0/syft_0.56.0_linux_amd64.tar.gz | tar xz -C /usr/local/bin syft

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          syft . -o cyclonedx-xml > sbom.xml

      - name: Run Trivy Image Scan
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL --format table -o trivy-image-results.txt ${{ secrets.DOCKERHUB_USERNAME }}/myfile:${{ github.run_id }} || true

      - name: Upload Trivy Image Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-results
          path: trivy-image-results.txt

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-results
          path: sbom.xml

  update-helm-chart:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: trivy-image-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.email "chaudharivipul945@gmail.com"
          git config --global user.name "Jitu"

      - name: Pull latest changes
        run: git pull origin main --rebase

      - name: Update Helm Chart Tag
        run: |
          sed -i 's/tag: .*/tag: "${{ github.run_id }}"/' helm/myfile-chart/values.yaml

      - name: Commit and Push
        run: |
          git add helm/myfile-chart/values.yaml
          git commit -m "Update tag in Helm chart"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push origin main

